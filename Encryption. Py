from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import os

def encrypt_file(file_path, key):
    """ Encrypts a file using AES encryption """
    # Generate a random IV for security
    iv = get_random_bytes(AES.block_size)
    
    # Open the file to encrypt
    with open(file_path, 'rb') as file:
        file_data = file.read()

    # Pad the data to be a multiple of AES block size
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted_data = cipher.encrypt(pad(file_data, AES.block_size))

    # Write the encrypted data to a new file
    encrypted_file_path = file_path + '.enc'
    with open(encrypted_file_path, 'wb') as encrypted_file:
        encrypted_file.write(iv + encrypted_data)

    return encrypted_file_path


def decrypt_file(file_path, key):
    """ Decrypts an AES-encrypted file """
    with open(file_path, 'rb') as file:
        iv = file.read(AES.block_size)  # First block is the IV
        encrypted_data = file.read()

    # Decrypt the file data
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)

    # Write the decrypted data to a new file
    decrypted_file_path = file_path.replace('.enc', '.dec')
    with open(decrypted_file_path, 'wb') as decrypted_file:
        decrypted_file.write(decrypted_data)

    return decrypted_file_path
